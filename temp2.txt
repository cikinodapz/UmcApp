                      <SelectContent>
                        <SelectItem value="BAIK">BAIK</SelectItem>
                        <SelectItem value="RUSAK_RINGAN">RUSAK_RINGAN</SelectItem>
                        <SelectItem value="RUSAK_BERAT">RUSAK_BERAT</SelectItem>
                        <SelectItem value="HILANG">HILANG</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* detail */}
                {i._showDetail && (
                  <div className="mt-4 rounded-xl border p-4 bg-gray-50">
                    <DetailBlock item={i} />
                    <div className="mt-3 flex flex-wrap gap-2">
                      <Button asChild variant="outline" size="sm" className="rounded-md">
                        <Link href={`/invoice/${i.id}`}>Lihat Kwitansi</Link>
                      </Button>
                      <Button asChild variant="outline" size="sm" className="rounded-md">
                        <Link href={`/ulasan/${i.id}`}>Tulis Ulasan</Link>
                      </Button>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  )
}

/* ================= Komponen ================= */

function Thumb({ kind, photoUrl, name }: { kind: Kind; photoUrl?: string | null; name: string }) {
  return (
    <div className="relative w-20 h-20 rounded-lg overflow-hidden bg-gray-50 shrink-0">
      {photoUrl ? (
        <Image src={photoUrl} alt={name} fill className="object-cover" />
      ) : (
        <div className="w-full h-full grid place-items-center bg-gradient-to-br from-indigo-50 to-violet-50">
          {kind === "aset" ? <Boxes className="w-6 h-6 text-indigo-400" /> : <Wrench className="w-6 h-6 text-violet-400" />}
        </div>
      )}
    </div>
  )
}

function StarRating({ value, onChange }: { value: number; onChange: (v: number) => void }) {
  return (
    <div className="inline-flex items-center gap-1">
      {[1, 2, 3, 4, 5].map((n) => (
        <button
          key={n}
          aria-label={`rating-${n}`}
          className={`p-0.5 ${n <= value ? "text-amber-500" : "text-gray-300"} hover:text-amber-500`}
          onClick={() => onChange(n)}
        >
          <Star className={`w-4 h-4 ${n <= value ? "fill-current" : ""}`} />
        </button>
      ))}
    </div>
  )
}

function DetailBlock({ item }: { item: LoanItem }) {
  return (
    <div className="text-sm text-gray-700 space-y-1">
      <Row label="Kode" value={<span className="font-mono">#{item.code}</span>} />
      <Row label="Jenis" value={item.kind.toUpperCase()} />
      <Row label="Qty" value={String(item.qty)} />
      <Row label="Tarif Satuan" value={formatCurrency(item.unitPrice)} />
      <Row label="Mulai" value={fmtDate(item.startDate)} />
      <Row label="Jatuh Tempo" value={fmtDate(item.dueDate)} />
      <Row label="Dikembalikan" value={fmtDate(item.returnedAt || item.dueDate)} />
      {item.notes && <Row label="Catatan" value={item.notes} />}
      <div className="pt-2 text-xs text-gray-500">
        Subtotal estimasi: <strong>{formatCurrency(item.unitPrice * item.qty)}</strong> (belum termasuk denda/biaya lain).
      </div>
    </div>
  )
}

function Row({ label, value }: { label: string; value: React.ReactNode }) {
  return (
    <div className="flex items-start justify-between gap-3">
      <span className="text-gray-500 w-40">{label}</span>
      <div className="flex-1 font-medium">{value}</div>
    </div>
  )
}

/* ================ Utils & UI kecil ================ */

function conditionToText(c?: Condition | null) {
  if (!c) return "BAIK"
  return c
}

function conditionVariant(c?: Condition | null): "secondary" | "outline" | "destructive" {
  if (c === "BAIK") return "secondary"
  if (c === "RUSAK_RINGAN") return "outline"
  if (c === "RUSAK_BERAT" || c === "HILANG") return "destructive"
  return "outline"
}

function fmtDate(iso?: string | null) {
  if (!iso) return "-"
  const d = new Date(iso)
  return d.toLocaleDateString("id-ID", { year: "numeric", month: "2-digit", day: "2-digit" })
}

function EmptyState({ text, hint }: { text: string; hint?: React.ReactNode }) {
  return (
    <div className="rounded-2xl border p-10 text-center text-gray-600">
      <p className="font-medium">{text}</p>
      {hint && <p className="text-sm text-gray-500 mt-1">{hint}</p>}
    </div>
  )
}
